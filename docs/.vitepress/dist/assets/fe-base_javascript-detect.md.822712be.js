import{_ as n,o as l,c as p,k as s,a as o,t as e,S as t}from"./chunks/framework.7f03344f.js";const h=JSON.parse('{"title":"总结 JavaScript 的检测方式","description":"","frontmatter":{"title":"总结 JavaScript 的检测方式","date":"2016-11-15T20:32:12.000Z","tags":null,"desc":["JavaScript","detect"],"toc":true,"categories":[["前端基础"]]},"headers":[],"relativePath":"fe-base/javascript-detect.md","filePath":"fe-base/javascript-detect.md","lastUpdated":null}'),c={name:"fe-base/javascript-detect.md"},r={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),y=t(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在JavaScript开发当中，因为涉及到跨平台的兼容性问题，我们常常需要去检测一些方法或者属性是否存在，如果不存在而我们贸然使用的话，就是报错导致程序无法继续运行，而用户则会不知所措。</p><p>我们都知道，JavaScript是有5种原始类型的：</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li></ul><h2 id="检测原始类型" tabindex="-1">检测原始类型 <a class="header-anchor" href="#检测原始类型" aria-label="Permalink to &quot;检测原始类型&quot;">​</a></h2><p>检测原始类型的最佳选择是使用<code>typeof</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// boolean</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span></code></pre></div><p><code>typeof</code>有一个好处就是：未声明的变量也不会报错</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> someVariable </span><span style="color:#676E95;font-style:italic;">//此时someVariable是未定义，返回undefined</span></span></code></pre></div><h2 id="检测复合类型" tabindex="-1">检测复合类型 <a class="header-anchor" href="#检测复合类型" aria-label="Permalink to &quot;检测复合类型&quot;">​</a></h2><p>复合类型内置有（不只以下几种，只是举例说明）：</p><ul><li>Object</li><li>Array</li><li>Date</li><li>Error</li></ul><p>当我们使用<code>typeof</code>检测的时候，就会看到都是返回object</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> [] </span><span style="color:#676E95;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//object</span></span></code></pre></div><p>此时的最佳选择是使用<code>instanceof</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> today </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">today </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Date</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>到这里好像全部的检测类型都搞定了。</p><p>但是，检测类型并不能这么简单地分为原始类型和复合类型，因为复合类型会涉及到构造函数的问题。</p><h3 id="检测函数" tabindex="-1">检测函数 <a class="header-anchor" href="#检测函数" aria-label="Permalink to &quot;检测函数&quot;">​</a></h3><p>当我们的页面内嵌了其他的frame时，问题就来了。因为不同的frame的构造函数是独立的，即会发生以下问题：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在frame A定义的函数test</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在frame B检测</span></span>
<span class="line"><span style="color:#A6ACCD;">test </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 而使用typeof则可以正确返回</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> test </span><span style="color:#676E95;font-style:italic;">// function</span></span></code></pre></div><p>故检测函数的时候，最佳选择是使用<code>typeof</code></p><h3 id="检测数组" tabindex="-1">检测数组 <a class="header-anchor" href="#检测数组" aria-label="Permalink to &quot;检测数组&quot;">​</a></h3><p>数组的问题和函数是一样的，因为不同的构造函数。而此时<code>typeof</code>也不灵了，因为只返回object。</p><p>Douglas Crockford则提供了一种叫duck typing(鸭式辩型)的方式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isArray</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sort</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>其实，这种方式是默认的认为只有数组才有sort方法。其实传入任何有sort方法的对象也是返回true的。因此这个方法并不完美。</p><p>最终的解决方案也是ECMAScript 5的实现方案，就是来自Kangax大神的方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isArray</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[object Array]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这个方法能完美地辨别是否为数组。</p><p>在ECMAScript 5则可以使用Array的内置方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#A6ACCD;">([]) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><h2 id="检测属性" tabindex="-1">检测属性 <a class="header-anchor" href="#检测属性" aria-label="Permalink to &quot;检测属性&quot;">​</a></h2><p>我发现，在检测一个对象的属性是否存在的时候，常常是这样的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someProps)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//一些逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>或者是这样的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someProps </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//一些逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>或者是这样的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someProps </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//一些逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>其实以上都是有问题的！因为以上方式都忽略了object可能存在假值的情况（即是属性存在，但是等于null或者undefined或者0或者false或者空字符串等等）。因此最佳的方式是使用<code>in</code>运算符：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(someProps </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> object)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//一些逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上检测数据类型的所有方式。</p><p>参考： 《Maintainable JavaScript》</p>`,43);function D(a,F,C,A,d,f){return l(),p("div",null,[s("h1",r,[o(e(a.$frontmatter.title)+" ",1),i]),y])}const b=n(c,[["render",D]]);export{h as __pageData,b as default};
