import{_ as o,o as e,c as l,k as s,a as t,t as n,S as p}from"./chunks/framework.7f03344f.js";const m=JSON.parse('{"title":"HTML5 History API","description":"","frontmatter":{"title":"HTML5 History API","date":"2016-07-05T21:16:18.000Z","tags":"History API","desc":"html5,history api,历史API,操作历史记录","toc":true,"categories":[["前端基础"],"浏览器"]},"headers":[],"relativePath":"fe-base/h5-history-api.md","filePath":"fe-base/h5-history-api.md","lastUpdated":null}'),c={name:"fe-base/h5-history-api.md"},r={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),y=p(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在<code>DOM</code>中，<code>window</code>对象中有一个<code>history</code>的对象可以用来访问浏览器的历史记录，在<code>HTML5</code>中，更可以通过它来操作历史记录</p><h2 id="以前的-api" tabindex="-1">以前的 API <a class="header-anchor" href="#以前的-api" aria-label="Permalink to &quot;以前的 API&quot;">​</a></h2><p>历史记录的前进和后退（相当于点击浏览器上的前进和后退按钮）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forward</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//前进</span></span>
<span class="line"><span style="color:#A6ACCD;">  history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">back</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//后退</span></span></code></pre></div><p>移动到指定的历史记录位置（其中0为当前页，-1为上一页，1为下一页）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//相当于history.back();</span></span>
<span class="line"><span style="color:#A6ACCD;">  history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//相当于history.forward();</span></span></code></pre></div><p>其中，<code>history</code>有一个<code>length</code>的属性，就是历史记录的长度</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> historyLength </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> history</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="更强大的html5-histroy-api" tabindex="-1">更强大的HTML5 Histroy API <a class="header-anchor" href="#更强大的html5-histroy-api" aria-label="Permalink to &quot;更强大的HTML5 Histroy API&quot;">​</a></h2><ul><li><code>history.pushState()</code></li><li><code>history.replaceState()</code> 两个方法配合<code>window.onpopstate</code>事件使用更佳。</li></ul><p>其中，<code>pushState()</code>方法接受三个参数</p><ul><li>状态对象（state obejct）即一个可序列化的<code>javascript</code>对象，与新历史记录相关联。可以使用<code>history.state</code>读取当前历史记录相关的数据对象。</li><li>标题（title）目前暂时会忽略这个参数，以后可能会用上。</li><li>地址（URL）新的历史记录的地址。</li></ul><p>举个例子，假设我们现在打开的是index.html</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> stateObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">country</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">China</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pushState</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">stateObj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">china</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">china.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>页面加载完index.html，一秒之后URL就会变成china.html，然而页面并不会加载china.html，所以就算china.html这个页面不存在也没问题。此时的<code>history.state</code>就是<code>stateObj</code>的拷贝，此时我们就可以利用这个数据来进行相关的操作了。 如果此时我们点击后退，则URL变成index.html，此时<code>history.state=null</code></p><p>说到这里，你应该会有点困惑，好像这个<code>API</code>并没什么卵用，直接用<code>hash</code>配合<code>window.onhashchange</code>就可以做到啦，类似如下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.someURL.com#/china.html?country=china</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面这个代码也能实现添加历史记录，并且不刷新页面，也有对应<code>伪URL</code>的相关的数据。</p><p>不过对比而言，<code>pushState</code>也有它的优势：</p><ul><li>使用<code>hash</code>的方式时，如果当前<code>hash</code>的值不变（即url=&#39;www.someURL.com#foo&#39;时，设置location.href = &#39;www.someURL.com#foo&#39;），是不会创建新的历史记录的，也不会触发<code>onhashchange</code>事件的，而<code>history.pushState</code>插入相同 url 时则会创建新的历史记录。</li><li>绑定相关数据时，<code>history.state</code>可以说是可以绑定任意数据，而基于<code>hash</code>的方式则要把所有数据转换成相关的字符串</li></ul><p><code>replaceState()</code>使用方法和<code>pushState()</code>基本一致。不同的是，<code>replaceState()</code>方法会修改当前历史记录而不是创建新的历史记录</p><p>相关DEMO，敬请期待。。。</p>`,23);function d(a,h,D,A,F,C){return e(),l("div",null,[s("h1",r,[t(n(a.$frontmatter.title)+" ",1),i]),y])}const g=o(c,[["render",d]]);export{m as __pageData,g as default};
