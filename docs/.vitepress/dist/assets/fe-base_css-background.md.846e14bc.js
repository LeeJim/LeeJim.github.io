import{_ as a,o as c,c as d,k as e,a as t,t as l,S as n}from"./chunks/framework.c5ba3aa3.js";const _=JSON.parse('{"title":"CSS Background 基础知识","description":"","frontmatter":{"title":"CSS Background 基础知识","date":"2015-10-17T16:05:26.000Z","tags":["CSS"],"desc":"CSS,background,background-size,background-clip,background-origin,background-position,background-attachment","toc":true,"categories":["CSS"]},"headers":[],"relativePath":"fe-base/css-background.md","filePath":"fe-base/css-background.md","lastUpdated":1691668833000}'),i={name:"fe-base/css-background.md"},r={id:"frontmatter-title",tabindex:"-1"},s=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),p=n('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>WEB开发常用到<code>background</code>但是没有去深究，仔细看了之后，发现<code>background</code>里面的知识点还是挺多不懂的。</p><h2 id="background-size" tabindex="-1">background-size <a class="header-anchor" href="#background-size" aria-label="Permalink to &quot;background-size&quot;">​</a></h2><p>设置背景图大小[<code>初始值auto auto</code>-<code>非继承</code>-<code>适用所有元素</code>]</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">backgrount-size: (&lt;length&gt; | &lt;percentage&gt; | auto){1,2} | contain | cover</span></span></code></pre></div><ul><li><code>length</code>：直接指定背景图大小</li><li><code>percentage</code>：指定背景图片相对背景区的百分比</li><li><code>auto</code>：以背景图片的比例缩放背景图片</li><li><code>contain</code>：缩放背景图片以完全装入背景区，可能背景区部分空白。</li><li><code>cover</code>：缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。</li></ul><p>补充：</p><ul><li><code>&lt;length&gt;</code>/<code>&lt;percentage&gt;</code>/<code>auto</code> 可设置两个，第一个对应宽度，第二个对应高度；如果只指定一个，高度则隐式设置成<code>auto</code></li><li>逗号分隔的多个值：设置多重背景</li><li><code>contain</code>/<code>cover</code> 会保留图片的原来比例</li></ul><h2 id="background-origin" tabindex="-1">background-origin <a class="header-anchor" href="#background-origin" aria-label="Permalink to &quot;background-origin&quot;">​</a></h2><p>规定了指定背景图片<code>background-image</code>属性的原点位置的背景相对区域[<code>初始值padding-box</code>-<code>非继承</code>-<code>适用所有元素</code>]</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">backgrount-origin: border-box | padding-box | content-box</span></span></code></pre></div><ul><li><code>border-box</code>: 背景图将显示在<code>border</code>上，设置<code>border-style:dashed</code>即可以看到效果</li><li><code>padding-box</code>: 背景图将显示到<code>padding</code>上。</li><li><code>content-box</code>: 背景图只显示在内容区域</li></ul><p>如果还不明白，可以看<a href="https://jsfiddle.net/vk3v9sez/" target="_blank" rel="noreferrer">这个例子</a></p><p>补充：</p><ul><li>当使用 <code>background-attachment</code> 为<code>fixed</code>时，该属性将被忽略不起作用。</li></ul><h2 id="background-clip" tabindex="-1">background-clip <a class="header-anchor" href="#background-clip" aria-label="Permalink to &quot;background-clip&quot;">​</a></h2><p>效果同上面的<code>background-origin</code>，差别在于指定的是背景色不是图片</p><p><a href="https://jsfiddle.net/vk3v9sez/1/" target="_blank" rel="noreferrer">例子才此</a>，可以和上面对比一下</p><h2 id="background-attachment" tabindex="-1">background-attachment <a class="header-anchor" href="#background-attachment" aria-label="Permalink to &quot;background-attachment&quot;">​</a></h2><p>如果指定了 <code>background-image</code> ，那么 <code>background-attachment</code> 决定背景是在视口中固定的还是随包含它的区块滚动的[<code>初始值scroll</code>-<code>非继承</code>-<code>适用所有元素</code>]</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">background-attachment: scroll | fixed | local</span></span></code></pre></div><ul><li><code>scroll</code>： 表示背景相对于元素本身固定，而不是随着它的内容滚动（对元素边框是有效的）。</li><li><code>fixed</code>：表示背景相对于视口固定</li><li><code>local</code>：表示背景相对于元素的内容固定。</li></ul><p>解释：</p><ul><li><code>fixed</code>和其他两个的差别在于：<code>fixed</code>是相对于视窗（可以理解成屏幕）固定的。</li><li><code>scroll</code>和<code>local</code>的差别在于：<code>scroll</code>在本元素有滚动条的情况下，背景图相对于本元素的滚动条不动，而<code>local</code>则是跟着滚动的。可以看下<a href="https://jsfiddle.net/bcLs7uxk/" target="_blank" rel="noreferrer">根据MDN改编的例子</a></li></ul><h2 id="background-position" tabindex="-1">background-position <a class="header-anchor" href="#background-position" aria-label="Permalink to &quot;background-position&quot;">​</a></h2><p>指定背景图片的初始位置[<code>初始值0% 0%</code>-<code>非继承</code>-<code>适用所有元素</code>]</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">background-position: (top, bottom, left, right){1,2} | &lt;percentage&gt; | &lt;length&gt;</span></span></code></pre></div><ul><li><code>top</code>: 等于垂直方向的0%</li><li><code>bottom</code>：等于垂直方向的100%</li><li><code>left</code>：等于水平方向的0%</li><li><code>right</code>：等于水平方向的100%</li></ul>',28);function g(o,u,b,h,k,m){return c(),d("div",null,[e("h1",r,[t(l(o.$frontmatter.title)+" ",1),s]),p])}const x=a(i,[["render",g]]);export{_ as __pageData,x as default};
