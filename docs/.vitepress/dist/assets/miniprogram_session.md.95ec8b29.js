import{_ as n,o,c as e,k as s,a as l,t as p,S as c}from"./chunks/framework.7f03344f.js";const t="/miniprogram/api-login.2fcc9f35.jpg",m=JSON.parse('{"title":"小程序 Session","description":"","frontmatter":{"title":"小程序 Session","date":"2017-07-18T23:26:51.000Z","tags":["小程序","Session"],"desc":null,"toc":true,"categories":["小程序"]},"headers":[],"relativePath":"miniprogram/session.md","filePath":"miniprogram/session.md","lastUpdated":null}'),r={name:"miniprogram/session.md"},i={id:"frontmatter-title",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),F=c('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近刚完成了一项小程序的开发任务。彻彻底底地从零开始，其中遇到了不少坑要填，因此来总结一下，希望能帮助到其他人，避免重复踩坑。</p><p>每个人开发小程序，都希望用户能持续使用自己开发的小程序，那么维护用户的登录态就是首要的任务。</p><h2 id="请求强制关闭-withcredentials" tabindex="-1">请求强制关闭 withCredentials <a class="header-anchor" href="#请求强制关闭-withcredentials" aria-label="Permalink to &quot;请求强制关闭 withCredentials&quot;">​</a></h2><p>首先，第一个需要踩的坑就是无 <code>cookie</code> 的登录态要如何维护。</p><p>微信官方提供了一个流程图，我们可以先看看：</p><p><img src="'+t+`" alt="微信官方登录时序图"></p><p>简而言之：</p><ol><li>在小程序上通过 <code>wx.login()</code> 获取 <code>code</code></li><li>将 <code>code</code> 传到自己的服务器，然后将小程序的 <code>secret</code> 和 <code>appid</code> 与微信服务器交换 <code>openid</code> 和 <code>session_key</code></li><li>将 <code>session_key</code> 加上随机数生成 <code>sessionId</code>，然后 <code>openid</code> 和 <code>session_key</code> 存在 <code>session</code> 里</li><li>小程序将 <code>sessionId</code> 存起来，每次访问都带上这个 <code>sessionId</code></li></ol><h2 id="小程序获取-code" tabindex="-1">小程序获取 code <a class="header-anchor" href="#小程序获取-code" aria-label="Permalink to &quot;小程序获取 code&quot;">​</a></h2><p>在小程序的 <code>app.js</code> 文件里，<code>onLaunch</code> 函数调用我们写好的 <code>login</code> 函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">login</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">loginResult</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">wx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getUserInfo</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      withCredentials</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">userResult</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// doLogin 就是将这些数据发送到服务器</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">doLogin</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">loginResult</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            encryptedData</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userResult</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">encryptedData</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            iv</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">userResult</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iv</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>服务器接受到这些数据，就可以和微信服务器交换数据了，这时我们拥有的数据就是 <code>openid</code> 和 <code>session_key</code>。</p><h2 id="解密用户信息" tabindex="-1">解密用户信息 <a class="header-anchor" href="#解密用户信息" aria-label="Permalink to &quot;解密用户信息&quot;">​</a></h2><p>通过小程序传过来的和 <code>encryptedData</code> 和 <code>iv</code>，然后还有刚才获取的 <code>session_key</code>，我们就能解密用户的信息，通过对比解密出来的 <code>openid</code> 和微信交换来的 <code>openid</code> 对比，即可知道用户信息的正确性。</p><h2 id="sessionid生成" tabindex="-1">sessionId生成： <a class="header-anchor" href="#sessionid生成" aria-label="Permalink to &quot;sessionId生成：&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generateSessionId</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">crypto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">randomBytes</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">32</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>按理说，我们生成了 <code>sessionId</code>，然后将对应的用户信息存在 <code>session</code> 里就大功告成了。</p><p>但是这样的话，很容易被伪造的暴力的伪造 <code>sessionId</code> 攻击。因此，需要再进一步，生成另外一个校验数据称为 <code>sessionkey</code> 简称 <code>sKey</code>，这时就使用到刚获取到的 <code>session_key</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generateSkey</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sessionKey</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sha1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">crypto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createHash</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sha1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">digest</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sha1</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">appid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">secret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sessionKey</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>此时我们的 <code>session</code> 的 <code>key</code> 就是一个前面随机生成的 <code>sessionId</code>。<code>value</code> 则为：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">userinfo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">session_key</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">sKey</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后每次 <code>sessionId</code> 传递过来的时候，我们获取对应的 <code>session_key</code>，然后调用 <code>generateSkey</code> 生成 <code>sKey</code>，然后和 <code>session</code> 里面的 <code>sKey</code> 对比即可。</p><p>此时，<code>session</code> 的生成大功告成了！</p><h2 id="两个登录态的问题" tabindex="-1">两个登录态的问题 <a class="header-anchor" href="#两个登录态的问题" aria-label="Permalink to &quot;两个登录态的问题&quot;">​</a></h2><p>首先，调用微信生成的 code 的 <code>login()</code> 函数是有时效的，大概5分钟。</p><p>我们生成的 <code>session</code> 也是有时效的。这样就有两个登录态任一出现失效的情况。因此我们需要处理两个的失效问题。</p><h3 id="小程序登录态" tabindex="-1">小程序登录态 <a class="header-anchor" href="#小程序登录态" aria-label="Permalink to &quot;小程序登录态&quot;">​</a></h3><p>官方提供了 <code>wx.checkSession()</code> 方法给我们验证登录态是否失效。因此这个失效的话，我们就重新调用之前写好的 <code>login</code> 函数</p><h3 id="session失效" tabindex="-1">session失效 <a class="header-anchor" href="#session失效" aria-label="Permalink to &quot;session失效&quot;">​</a></h3><p>这个失效的问题就比较麻烦。很有可能就是发送某一个请求的时候发现 <code>session</code> 失效了。</p><p>因此我们可以在 <code>app.js</code> 的 <code>onShow()</code> 里发送请求到服务器测试 <code>session</code> 是否过期。过期的话就重新调用 <code>login</code> 函数。</p>`,32);function d(a,D,A,C,h,u){return o(),e("div",null,[s("h1",i,[l(p(a.$frontmatter.title)+" ",1),y]),F])}const f=n(r,[["render",d]]);export{m as __pageData,f as default};
