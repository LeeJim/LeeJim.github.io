import{_ as e,o,c as n,k as s,a as l,t,S as p}from"./chunks/framework.7f03344f.js";const r="/responsive-web/screen-width.png",c="/responsive-web/window-width.png",i="/responsive-web/viewport-width.png",d="/responsive-web/vw-compatibility.png",v=JSON.parse('{"title":"移动端适配的四种方案","description":"","frontmatter":{"title":"移动端适配的四种方案","date":"2020-08-11T19:44:03.000Z","tags":null,"categories":["前端基础"],"toc":true},"headers":[],"relativePath":"fe-base/responsive-web.md","filePath":"fe-base/responsive-web.md","lastUpdated":null}'),D={name:"fe-base/responsive-web.md"},y={id:"frontmatter-title",tabindex:"-1"},C=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),h=p('<h2 id="viewport-的作用" tabindex="-1">viewport 的作用 <a class="header-anchor" href="#viewport-的作用" aria-label="Permalink to &quot;viewport 的作用&quot;">​</a></h2><p>viewport 翻译成中文是“视窗”的意思，也就是字面上的意思，页面展示的窗口。知道这个 viewport 有哪些作用呢？我举例一下：</p><h2 id="计算百分比值" tabindex="-1">计算百分比值 <a class="header-anchor" href="#计算百分比值" aria-label="Permalink to &quot;计算百分比值&quot;">​</a></h2><p>当我们设置一个块级元素的宽度为百分比的时候，在HTML的规则中，最终的大小取决于它的父元素。如果元素嵌套情况如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">html &gt; body &gt; div</span></span></code></pre></div><p>最终要计算出 <code>div</code> 的实际大小，就要知道 <code>body</code> 的大小，而 <code>body</code> 的大小又依赖于 <code>html</code>。所以最终的问题是，如何计算 <code>html</code> 的大小。而这个 <code>html</code> 是根元素，没有父元素。此时就是 <code>viewport</code> 登场了。由它来约束 <code>html</code> 的大小。</p><h2 id="用户缩放" tabindex="-1">用户缩放 <a class="header-anchor" href="#用户缩放" aria-label="Permalink to &quot;用户缩放&quot;">​</a></h2><p>当用户进行缩放时，对于我们的页面是如何变化的，或者用户当前是否存在缩放状态，这些都是通过 <code>viewport</code> 来获取的。</p><p>用户进行缩放时，页面的 CSS 像素是不发生变化的（如果有变化，必然触发重新渲染），变化的是视窗的大小。当用户放大页面是，视窗应该是变小，但物理像素是不会变化的，因此相同的 CSS 像素占用更多的设备像素，因此此时 dpr 会变大。</p><blockquote><p>dpr(device pixel ratio) 设备像素比 = 物理像素 / 设备独立像素</p></blockquote><p>在 <code>JavaScript</code> 里，我们可以通过 <code>screen.width</code> 获取物理像素的宽度，通过 <code>window.innerWidth</code> 获取当前页面的独立设备像素，因此可以这样计算设备像素比：<code>screen.width / window.innerWidth</code>。</p><p>当然，也可以直接获得设备像素比：<code>window.devicePixelRatio</code></p><p>在桌面端，<strong>设备像素比(dpr)</strong> 通常情况下都是等于 1，当不等于 1 的时候，通常是用户进行缩放了。</p><h2 id="移动端适配" tabindex="-1">移动端适配 <a class="header-anchor" href="#移动端适配" aria-label="Permalink to &quot;移动端适配&quot;">​</a></h2><p>在移动端，会有许多各种尺寸的屏幕。如何在不同的屏幕呈现相同的效果，这就是移动端适配的工作，要想弄清楚如何兼容，就要先理解 <code>viewport</code> 的概念。</p><h1 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h1><h2 id="屏幕尺寸" tabindex="-1">屏幕尺寸 <a class="header-anchor" href="#屏幕尺寸" aria-label="Permalink to &quot;屏幕尺寸&quot;">​</a></h2><p>可通过 <code>screen.width/height</code> 获得。一般是通过 <strong>设备像素(device pixel)</strong> 来计算。</p><p><img src="'+r+'" alt="screen-width"></p><h2 id="窗口尺寸" tabindex="-1">窗口尺寸 <a class="header-anchor" href="#窗口尺寸" aria-label="Permalink to &quot;窗口尺寸&quot;">​</a></h2><p>可通过 <code>window.innerWidth/innerHeight</code> 获得。一般是通过 CSS 像素来计算。窗口是浏览器的窗口，包含了滚动条的尺寸，不包含顶部菜单：</p><p><img src="'+c+'" alt="window-width"></p><h2 id="视窗尺寸" tabindex="-1">视窗尺寸 <a class="header-anchor" href="#视窗尺寸" aria-label="Permalink to &quot;视窗尺寸&quot;">​</a></h2><p>可通过 <code>document.documentElement.clientWidth/clientHeight</code> 获得。一般是通过 CSS 像素来计算。视窗与窗口差别在于不包含滚动条的尺寸：</p><p><img src="'+i+`" alt="viewport-width"></p><h1 id="移动端适配-1" tabindex="-1">移动端适配 <a class="header-anchor" href="#移动端适配-1" aria-label="Permalink to &quot;移动端适配&quot;">​</a></h1><h2 id="rem-方案" tabindex="-1">REM 方案 <a class="header-anchor" href="#rem-方案" aria-label="Permalink to &quot;REM 方案&quot;">​</a></h2><p>视觉稿 750px，设置根元素即（html）的大小为 75px，所有元素均这样计算，以 <code>230px</code> 举例:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">width: 350px / 75px = 5rem</span></span></code></pre></div><p>此时页面上的所有元素均以根元素的 <code>font-size</code> 计算，因此要做到动态支持不同尺寸的手机，只需要动态修改根元素的 <code>font-size</code> 即可。由于我们是以 <code>750px</code> 的十分之一为基准的，所以只需将当前 <strong>视觉窗口(visual viewport)</strong> 同样除以 10 即可：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> docEl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> rem </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> docEl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">docEl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fontSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rem </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">px</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>另外，由于 <code>font-size</code> 是继承性属性，上述代码将 <code>&lt;html&gt;</code> 的 <code>font-size</code> 修改了，为了不影响到默认的字体大小，可以在 <code>&lt;body&gt;</code> 上重置 <code>font-size</code>:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> inital</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="vw-方案" tabindex="-1">VW 方案 <a class="header-anchor" href="#vw-方案" aria-label="Permalink to &quot;VW 方案&quot;">​</a></h2><p>VW 方案是和 REM 方案的原理是一致的：以当前宽度按比例动态调整。</p><p>VW 方案的优势是 <strong>不需要动态调整基数</strong>。vw 单元原生支持与当前视觉窗口按比例动态变化。<strong>缺点是会有一定的兼容性</strong>，可以看下 vw 的兼容情况：</p><p><img src="`+d+`" alt="vw-compatibility"></p><p>具体实现方案与 REM 类似，以视觉稿的宽度（一般为 750px）为基准，将 px 单位转换成 vw 单位，以 <code>75px</code> 举例：(基于 vw 的定义，全宽等于 100vw)：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">banner</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">calc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">75</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">750</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> vw</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="transfrom-方案" tabindex="-1">transfrom 方案 <a class="header-anchor" href="#transfrom-方案" aria-label="Permalink to &quot;transfrom 方案&quot;">​</a></h2><p>该方案不需要转换单位，正常以 <code>px</code> 为单位。只需要以屏幕宽度与视觉稿的宽度的比作为基数，在根节点上进行缩变即可：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> docEl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> ratio </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">750</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> docEl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">scale(</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">ratio</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">\`</span></span></code></pre></div><blockquote><p>目前发现此方案存在兼容性问题，在 iOS 上，<code>fixed</code> 定位的元素会失去固定的效果，会随着滚动改变位置。另外在某些 Android 上，<code>fixed</code> 的元素会滑动之后消失。因此，<strong>不建议使用此方案</strong></p></blockquote><h2 id="viewport-meta-方案" tabindex="-1">viewport meta 方案 <a class="header-anchor" href="#viewport-meta-方案" aria-label="Permalink to &quot;viewport meta 方案&quot;">​</a></h2><p>此方案与 transform 方案类似，通过缩变，以将页面宽度适应屏幕宽度。</p><p>不同的地方在于，需要移除现有的 <code>viewport meta</code>，在 <code>head</code> 增加一个脚本实时生成 <code>viewport meta</code>：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> meta </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">meta</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">width=750, initial-scale=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">screen</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">750</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">, user-scalable=no</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstElementChild</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(meta)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; --&gt;</span></span></code></pre></div><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li><a href="https://zhuanlan.zhihu.com/p/21276657" target="_blank" rel="noreferrer">移动端viewport标签背后的三层含义</a></li><li><a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noreferrer">使用Flexible实现手淘H5页面的终端适配</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag" target="_blank" rel="noreferrer">MDN meta</a></li><li><a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html" target="_blank" rel="noreferrer">Configuring the Viewport</a></li><li><a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noreferrer">A tale of two viewports — part two</a></li><li><a href="https://juejin.im/post/5b6503dee51d45191e0d30d2#heading-24" target="_blank" rel="noreferrer">掘金</a></li><li><a href="https://zhuanlan.zhihu.com/p/25422063" target="_blank" rel="noreferrer">H5移动多终端适配全解 - 从原理到方案</a></li></ul>`,49);function F(a,A,m,u,b,g){return o(),n("div",null,[s("h1",y,[l(t(a.$frontmatter.title)+" ",1),C]),h])}const f=e(D,[["render",F]]);export{v as __pageData,f as default};
