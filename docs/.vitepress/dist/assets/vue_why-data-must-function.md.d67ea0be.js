import{_ as s,o as t,c as o,k as a,a as n,t as l,S as p}from"./chunks/framework.7f03344f.js";const _=JSON.parse('{"title":"为什么 data 必须为函数","description":"","frontmatter":{"title":"为什么 data 必须为函数","date":"2020-07-22T19:57:53.000Z","tags":null,"categories":["vue"],"toc":true},"headers":[],"relativePath":"vue/why-data-must-function.md","filePath":"vue/why-data-must-function.md","lastUpdated":null}'),r={name:"vue/why-data-must-function.md"},c={id:"frontmatter-title",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),d=p(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>Vue.js 是前端热门的UI框架。目前国内的前端团队一般都是 Vue.js、React 二选一。</p></blockquote><p>理解 Vue.js 的技术细节，既有助于日常工作开发，也是一个很好的敲门砖。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>我在社区里搜索过 Vue.js 相关的文章，发现不少高赞的文章都是水文，或者是年久失修的老文。</p><p>如果读者不明所以，直接照本宣科，面试的结果必然是凉凉。因此，我还是建议读者们自行阅读源码，或者看一些源码解析的文章（这里我推荐一下<a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noreferrer">黄老师的源码解析</a>），不会一知半解，被水文坑害。本文也是笔者自己的 Vue.js 相关的底层原理的认知总结，如有纰漏，或者错误，烦请指正。</p><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="vue-js-里-data-为什么必须是函数" tabindex="-1">Vue.js 里 data 为什么必须是函数？ <a class="header-anchor" href="#vue-js-里-data-为什么必须是函数" aria-label="Permalink to &quot;Vue.js 里 data 为什么必须是函数？&quot;">​</a></h3><p>因为最近几年微信小程序也挺火，因此这个问题可以联想到 <strong>微信小程序的 data 怎么是对象而不是函数呢？</strong></p><blockquote><p>vue 的官方也有提到，在同时渲染多个相同组件时，为了避免组件之间的数据互相影响，因此需要使用函数返回的对象来隔离。</p></blockquote><p>其实，从上面官网的解释很容易理解。对象是引用类型，被多个组件使用，必然会互相影响。所以不要被官网初始化 Vue 实例的例子误导：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello Vue!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>因为这个 Vue 实例是唯一的，所以不存在互相影响的问题。</p><p>所以可以得出结论1：<strong>data 使用函数是避免多个组件实例之间互相影响</strong></p><p>使用组件有两种方式：</p><ol><li>全局注册；使用 <code>Vue.component()</code></li><li>局部注册；在组件对象里使用 <code>components</code> 属性</li></ol><p>下面以局部注册举例。</p><p>渲染页面时，Vue.js 会解析 <code>HTML</code> 的tag，如果此时发现不是原生 tag，就会从 <code>components</code> 属性里获取对应的组件声明，如果找到，则使用 <code>createComponent</code> 函数创建组件，将组件声明通过 <code>Vue.extend</code>（源码位置：<code>src/core/global-api/extend.js</code>）来初始化构造函数 <code>Ctor</code>，这个 <code>Ctor</code> 将会被复用。</p><p>由此可见，我们的组件声明并不是直接用来当构造函数的，而是构造函数的入参。因此使用 data 函数可以避免数据的混淆，也避免了 Vue.js 需要对 data 进行深复制的繁琐操作，提升了执行速度。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noreferrer">Vue.js技术揭秘</a></li></ul>`,21);function u(e,h,D,y,C,F){return t(),o("div",null,[a("h1",c,[n(l(e.$frontmatter.title)+" ",1),i]),d])}const m=s(r,[["render",u]]);export{_ as __pageData,m as default};
