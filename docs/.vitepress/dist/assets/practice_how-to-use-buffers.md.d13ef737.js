import{_ as n,o as l,c as o,k as s,a as e,t as p,S as t}from"./chunks/framework.c5ba3aa3.js";const b=JSON.parse('{"title":"如何使用 Node.js 的 Buffers","description":"","frontmatter":{"title":"如何使用 Node.js 的 Buffers","date":"2017-10-06T17:14:44.000Z","tags":["Node.js","Buffers"],"desc":null,"from":"https://docs.nodejitsu.com/articles/advanced/buffers/how-to-use-buffers/","toc":true,"categories":[["Node.js"],"译文"]},"headers":[],"relativePath":"practice/how-to-use-buffers.md","filePath":"practice/how-to-use-buffers.md","lastUpdated":1691668833000}'),r={name:"practice/how-to-use-buffers.md"},c={id:"frontmatter-title",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),D=t(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在纯 <code>JavaScript</code> 开发中，unicode 编码的字符串也够好用的了，并不需要直接处理二进制数据(straight binary data)。在浏览器环境，大部分数据都是字符串的形式，这是足够的。然而，Node.js 是服务器环境，必须要处理 TCP 流还有文件系统的读取和写入流，这就让 <code>JavaScript</code> 需要处理纯二进制数据了。</p><p>其实，要解决这个问题直接使用字符串也是可以的，这也是 Node.js 一开始的做法。然而，这样的做法有许多问题，也很慢。</p><p>所以，记住了，别使用二进制字符串(binary strings)，用 <strong>Buffers</strong> 代替它！</p><h2 id="什么是-buffers" tabindex="-1">什么是 Buffers？ <a class="header-anchor" href="#什么是-buffers" aria-label="Permalink to &quot;什么是 Buffers？&quot;">​</a></h2><p>在Node.js里，Buffers 是专门设计来处理原始二进制数据的，是Buffer这个类的实例。</p><p>每个buffer在V8引擎外都有内存分配。Buffer操作起来和包含数字的数组一样，但是不像数组那样自由设置大小的。并且buffer拥有一系列操作二进制数据的方法。</p><blockquote><p>另外，buffer里的“数字”代表的是byte并且限制大小是0到255(2^8-1)</p></blockquote><h2 id="在哪里可以看到-buffers" tabindex="-1">在哪里可以看到 Buffers <a class="header-anchor" href="#在哪里可以看到-buffers" aria-label="Permalink to &quot;在哪里可以看到 Buffers&quot;">​</a></h2><p>一般情况，buffer经常可以在读取二进制数据流的时候看到，比如<code>fs.createReadStream</code></p><h3 id="创建-buffer" tabindex="-1">创建 Buffer <a class="header-anchor" href="#创建-buffer" aria-label="Permalink to &quot;创建 Buffer&quot;">​</a></h3><p>有许多方法可以生成新的 Buffers：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Buffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p>这个buffer是未初始化的，且包含8个字节(bytes)。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var buffer = new Buffer([ 8, 6, 7, 5, 3, 0, 9]);</span></span></code></pre></div><p>这个buffer用一个数组的内容来初始化。记住了，<strong>数组里的数字表示的是字节(bytes)</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var buffer = new Buffer(&quot;I&#39;m a string!&quot;, &quot;utf-8&quot;)</span></span></code></pre></div><p>通过第二个参数来指定编码(默认是utf-8)的字符串来初始化buffer。utf-8是在Node.js里最常用的编码，但是buffer还支持其他编码：</p><ul><li>&quot;ascii&quot;：这个编码方式很快，但是只限制ascii字符集。而且这个编码会将null转换成空格，而不像utf-8编码。</li><li>&quot;ucs2&quot;：一种双字节，小端存储的编码。可以编码一个unicode的子集。</li><li>&quot;base64&quot;：Base64字符串编码。</li><li>&quot;binary&quot;：这个“二进制字符串”前面提到过，这个编码即将被弃用，避免使用这个。</li></ul><h3 id="写入-buffer" tabindex="-1">写入 Buffer <a class="header-anchor" href="#写入-buffer" aria-label="Permalink to &quot;写入 Buffer&quot;">​</a></h3><h4 id="创建一个-buffer" tabindex="-1">创建一个 Buffer： <a class="header-anchor" href="#创建一个-buffer" aria-label="Permalink to &quot;创建一个 Buffer：&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Buffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>开始写入字符串：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; buffer.write(&quot;Hello&quot;, &quot;utf-8&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">5</span></span></code></pre></div><p><code>buffer.write</code>的第一个参数是写入buffer的字符串，而第二个参数是这个字符串的编码方式。如果字符串的编码是utf-8，那么这个参数是多余的。</p><p><code>buffer.write</code>返回5，这代表我们写入了5个字节到这个buffer。事实上，“Hello“这个字符串也刚好是5个字符。这是因为刚好每个字符都是8位(bits)。这对补全字符串很重要：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">7</span></span></code></pre></div><p>当<code>buffer.write</code>有3个参数的时候，第二个参数代表是偏移量，或者说是buffer开始写入的位置。</p><h3 id="读取-buffer" tabindex="-1">读取 Buffer <a class="header-anchor" href="#读取-buffer" aria-label="Permalink to &quot;读取 Buffer&quot;">​</a></h3><h4 id="tostring" tabindex="-1">toString： <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString：&quot;">​</a></h4><p>这个方法可能是读取 buffer 最通用的方法了，因为很多buffer都包含文本：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#A6ACCD;">\\u0000</span><span style="color:#C3E88D;">�k</span><span style="color:#A6ACCD;">\\t</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>再一次，第一个参数代表编码方式。这里可以看到并没有用完整个buffer。幸运的是，我们知道写入了多少字节到这个buffer，我们可以简单地增加参数去割开这个字符串：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h4 id="独立字节" tabindex="-1">独立字节： <a class="header-anchor" href="#独立字节" aria-label="Permalink to &quot;独立字节：&quot;">​</a></h4><p>你可以看到用类似数组的语法来设置独立位(individual bits)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer[</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> buffer[</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">33</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer[</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charCodeAt</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">49</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer[</span><span style="color:#F78C6C;">14</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> buffer[</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">49</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer[</span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">33</span></span>
<span class="line"><span style="color:#F78C6C;">33</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world!!11!</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>在这个例子里，手动地设置剩余的字节，这样就代表了“utf-8”编码的“！”和“1“字符了。</p><h2 id="更多有趣用法" tabindex="-1">更多有趣用法 <a class="header-anchor" href="#更多有趣用法" aria-label="Permalink to &quot;更多有趣用法&quot;">​</a></h2><h3 id="buffer-isbuffer-object" tabindex="-1">Buffer.isBuffer(object) <a class="header-anchor" href="#buffer-isbuffer-object" aria-label="Permalink to &quot;Buffer.isBuffer(object)&quot;">​</a></h3><p>这个方法是检测一个对象是否是buffer，类似于<code>Array.isArray</code></p><h3 id="buffer-bytelength-string-encoding" tabindex="-1">Buffer.byteLength(string, encoding) <a class="header-anchor" href="#buffer-bytelength-string-encoding" aria-label="Permalink to &quot;Buffer.byteLength(string, encoding)&quot;">​</a></h3><p>通过这个方法，你可以获取字符串(默认utf-8编码)的字节数。这个长度和字符串的长度(string length)不一样，因为很多字符需要更多的字节，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> snowman </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">☃</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> snowman</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> Buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">byteLength</span><span style="color:#A6ACCD;">(snowman)</span></span>
<span class="line"><span style="color:#F78C6C;">3</span></span></code></pre></div><p>这个unicode的雪人只有两个字符，却占了3个字节。</p><h3 id="buffer-length" tabindex="-1">buffer.length <a class="header-anchor" href="#buffer-length" aria-label="Permalink to &quot;buffer.length&quot;">​</a></h3><p>这个是buffer的长度，也代表分配了多少内存。这个不等于buffer内容的大小，因为buffer有可能是没满的，比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Buffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(snowman)</span></span>
<span class="line"><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F78C6C;">16</span></span></code></pre></div><p>在这个例子里，我们只写入了3个字符，但是长度依然是16，因为这是已经初始化了的。</p><h3 id="buffer-copy-target-targetstart-0-sourcestart-0-sourceend-buffer-length" tabindex="-1">buffer.copy(target, targetStart=0, sourceStart=0, sourceEnd=buffer.length) <a class="header-anchor" href="#buffer-copy-target-targetstart-0-sourcestart-0-sourceend-buffer-length" aria-label="Permalink to &quot;buffer.copy(target, targetStart=0, sourceStart=0, sourceEnd=buffer.length)&quot;">​</a></h3><p><code>buffer.copy</code>允许拷贝一个buffer的内容到另一个buffer。</p><p>第一个参数表示<strong>目标buffer</strong>，就是要写入内容的buffer。</p><p>另外一个参数是指定需要拷贝到目标buffer的开始位置。看个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> frosty </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Buffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> snowman </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Buffer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">☃</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> frosty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Happy birthday! </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">16</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> snowman</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copy</span><span style="color:#A6ACCD;">(frosty</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> frosty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Happy birthday! ☃</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>在这个例子，拷贝了含有3个字节长度的“snowman”buffer到“forsty”buffer。</p><p>其中forsty一开始写入了前16个字节，而snowman有3个字节长，因此结果就是19个字节长。</p><h3 id="buffer-slice-start-end-buffer-length" tabindex="-1">buffer.slice(start, end=buffer.length) <a class="header-anchor" href="#buffer-slice-start-end-buffer-length" aria-label="Permalink to &quot;buffer.slice(start, end=buffer.length)&quot;">​</a></h3><p>这个方法的API可以说和<code>Array.prototype.slice</code>是一样的。</p><p>不过其中一个特别重要的区别是：这个slice方法不是简单地返回一个新的buffer，也不仅仅是内存中子集的引用。这个slice会改变原来的buffer！举例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> puddle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> frosty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> puddle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">☃</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> puddle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">___</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> frosty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Happy birthday! ___</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>原文地址：<a href="https://docs.nodejitsu.com/articles/advanced/buffers/how-to-use-buffers/" target="_blank" rel="noreferrer">https://docs.nodejitsu.com/articles/advanced/buffers/how-to-use-buffers/</a></p>`,61);function C(a,f,i,u,F,A){return l(),o("div",null,[s("h1",c,[e(p(a.$frontmatter.title)+" ",1),y]),D])}const h=n(r,[["render",C]]);export{b as __pageData,h as default};
