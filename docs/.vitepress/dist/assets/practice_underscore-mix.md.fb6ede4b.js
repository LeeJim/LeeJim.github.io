import{_ as n,o as e,c as o,k as s,a as l,t as p,S as t}from"./chunks/framework.7f03344f.js";const h=JSON.parse('{"title":"理解underscore.js系列——②杂项","description":"","frontmatter":{"title":"理解underscore.js系列——②杂项","date":"2017-09-11T22:21:25.000Z","tags":["JavaScript","underscore.js"],"desc":"理解underscore.js v1.8.3 源码解析","toc":true,"categories":["源码解析","underscore"]},"headers":[],"relativePath":"practice/underscore-mix.md","filePath":"practice/underscore-mix.md","lastUpdated":null}'),c={name:"practice/underscore-mix.md"},r={id:"frontmatter-title",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),i=t(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>这一篇文章，就写一些零散的（我所理解的）知识点，感觉<code>underscore.js</code>许多细节值得好好深究一下。就像一篇好文章一样，经典的书籍值得重复地去品味，所谓书读百遍其义自现。</p><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h2><p>在<code>underscore.js</code>里，<code>typeof</code>后面都是跟着<code>==</code>而不是我们常用的<code>===</code></p><p>看了一些其他人的解释都是笼统地归因于要隐式转换，却不给出任何例子。所以我不是很能理解。有一个理由我觉得是比较合理的：</p><blockquote><p>typeof typeof x，不管x是什么都是返回string的话，那么<code>==</code>就已经足够，并且与<code>===</code>相比还节省了一个字节。</p></blockquote><h2 id="void-0与undefined" tabindex="-1">void 0与undefined <a class="header-anchor" href="#void-0与undefined" aria-label="Permalink to &quot;void 0与undefined&quot;">​</a></h2><p>首先，<code>void</code>在C里是和常见的，但在js里就很少看到了。<code>void</code>在js里是一个操作符，它的作用在MDN里是这样描述的：</p><blockquote><p>The <code>void</code> operator evaluates the given expression and then returns <code>undefined</code>.</p></blockquote><p>简而言之，<code>void</code>后面无论跟着什么表达式，都返回<code>undefined</code>。那使用<code>void 0</code>就是因为这样比较简洁。即</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span></span></code></pre></div><p>那么，为什么不直接用<code>undefined</code>而多此一举呢。</p><p>那是因为</p><ul><li><code>undefined</code>有可能被重写(<code>undefined</code>不是保留字)</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在IE8及以下</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> undefined </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主流浏览器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">undefined</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>void 0</code>的长度为6个字符，而<code>undefined</code>则长达9个字符。减少3个字符传输，也减少了敲击键盘的次数，这个替换还是有必要的。</li><li>在iOS某版本下，<code>void 0</code>的速度比<code>undefind</code>快（这个是网上看到的，未验证）</li></ul><h2 id="val-null" tabindex="-1">val == null <a class="header-anchor" href="#val-null" aria-label="Permalink to &quot;val == null&quot;">​</a></h2><p>在<code>underscore.js</code>里，经常会看到<code>val == null</code>这样的做法。起初，不以为然，后来仔细琢磨一番。发现，这是一个很好的实践啊。</p><p>在开发时，我要判断一个变量是否有传入，是这么做的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// others</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样做没什么问题，但是当有多个参数，而val又不需要传入的时候呢：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">someTest</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">otherVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">someTest</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>此时就要传入null了，而此时很容易补丁式将上面的判断改成如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// others</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>其实，此时完全可以用：<code>val == null</code>代替（<strong>此时val要么是undefined要么是null才会等于true，所以此语句完全等于上面那个语句</strong>）。</p><p>其中涉及的<code>==</code>（半等）知识，可以参考<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3" target="_blank" rel="noreferrer">Standard ECMA-262</a></p>`,26);function y(a,D,F,C,u,A){return e(),o("div",null,[s("h1",r,[l(p(a.$frontmatter.title)+" ",1),d]),i])}const v=n(c,[["render",y]]);export{h as __pageData,v as default};
