import{_ as l,o as n,c as o,k as s,a as p,t as e,S as t}from"./chunks/framework.c5ba3aa3.js";const N=JSON.parse('{"title":"JavaScript 的数据类型转换","description":"","frontmatter":{"title":"JavaScript 的数据类型转换","date":"2021-02-03T20:09:07.000Z","tags":null,"toc":true,"categories":["前端基础"]},"headers":[],"relativePath":"fe-base/js-data-type-transform.md","filePath":"fe-base/js-data-type-transform.md","lastUpdated":1691668833000}'),c={name:"fe-base/js-data-type-transform.md"},r={id:"frontmatter-title",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),i=t(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>JavaScript 是弱类型语言，在定义变量时不需要明确定义类型，刚接触是觉得非常灵活，很方便。</p><p>但随着开发走进深水区，更多的协作开发，越发觉得这种弱类型语言不受控，容易出错。</p><p>社区为了解决弱类型的问题，也有了如 Flow、TypeScript 等扩充。从团队的收益出发，增加这些是一个好的选择，但是也增加了许多学习成本。思考本质的话，这其实是为了解决问题而引入新的语法糖，增加了项目的复杂度，将问题转移罢了。</p><p>因此对于个人成长而言，对待问题的最好解决办法是正视它，剖析其背后原理。</p><p>本文将尝试将 JavaScript 的类型转换归纳总结，试图将日常开发遇到的问题与技巧尽可能地分享给大家。</p><p>原始数据类型：boolean、number、bigint、string、undefined、null、symbol（ES2016新增）</p><p>复合数据类型：Object</p><h2 id="相等算法" tabindex="-1">相等算法 <a class="header-anchor" href="#相等算法" aria-label="Permalink to &quot;相等算法&quot;">​</a></h2><p>截止 ES2015，存在 4 种数值相等算法：</p><ul><li>Abstract Equality Comparison(==)：也称半等</li><li>Strict Equality Comparison(===)：也成全等；使用相同算法的还有 <code>Array.prototype.indexOf</code>、<code>Array.prototype.lastIndexOf</code>、<code>case</code> 语法</li><li>Same-Value-Zero：<code>Set</code>、<code>Map</code>、还有 <code>Array.prototype.includes</code> 和 <code>String.prototype.includes</code></li><li>Same-Value：除了以上都是该算法；常见：<code>Object.is</code></li></ul><p>半等和全等比较常见，唯一差别就是是否进行类型转换（当类型相同时，两个算法是相等的）</p><p>半等和全等为了满足 IEEE 754 标准，做了特殊处理：NaN ! = NaN 和 -0 == +0</p><h2 id="半等-abstract-equality-comparison" tabindex="-1">半等 Abstract Equality Comparison <a class="header-anchor" href="#半等-abstract-equality-comparison" aria-label="Permalink to &quot;半等 Abstract Equality Comparison&quot;">​</a></h2><p>半等（==）的逻辑大致可以这么理解：</p><ol><li><p>类型是否相等？同类型则使用全等比较，类型不同则往下</p></li><li><p>两个数分别是 undefined、null？是则返回 true，否则往下</p></li><li><p>类型是 boolean 或 string？通过转换成 number 再比较</p><p>使用<code>Number()</code>转换而不是<code>parseInt</code>，可以看下面代码：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div></li><li><p>类型是 object？通过 <strong>转换成原始数据类型(<code>toPrimitive</code>)</strong> 再比较</p><p>转换原始数据类型优先使用 <code>valueOf()</code> 而不是 <code>toString()</code> ，但如果未定义 <code>valueOf()</code> 则会使用 <code>toSting()</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div></li><li><p>都不是则返回 false</p></li></ol><blockquote><p>总的原则是：尽可能都转换成Number容易比较</p></blockquote><h2 id="全等-strict-equality-comparison" tabindex="-1">全等 Strict Equality Comparison <a class="header-anchor" href="#全等-strict-equality-comparison" aria-label="Permalink to &quot;全等 Strict Equality Comparison&quot;">​</a></h2><p>全等（===）的逻辑比较符合预期：</p><ol><li>类型不一致，直接返回 false</li><li>如果是 undefined 或 null，则返回 true</li><li>如果是 Number 的话，做了特殊处理： <ul><li><code>NaN != NaN</code></li><li><code>-0 == +0</code></li></ul></li><li>如果是对象，查看是否是同个引用，是则返回 true，否则返回 false</li><li>剩下的逻辑都是判断两值是否相等</li></ol><h2 id="same-value-算法" tabindex="-1">Same-Value 算法 <a class="header-anchor" href="#same-value-算法" aria-label="Permalink to &quot;Same-Value 算法&quot;">​</a></h2><p>之所以会提供这个算法，是因为半等和全等存在两个问题：</p><ul><li>无法正确判断NaN，因为 <code>NaN != NaN</code></li><li>无法区分 <code>+0</code> 和 <code>-0</code></li></ul><p>而支持该算法的函数有 <code>Object.is()</code> ：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><p>此处 NaN 的判断又可以延伸一下，ES2015 提供了 <code>Number.isNaN</code> 方法</p><p>此时，你会很奇怪，之前不是有个全局方法 <code>isNaN</code> 了吗？是的，这个方法也是很诡异的。</p><p>因为 isNaN 会对传入的参数做类型转换，如果能转换成 Number 类型，则返回 true，否则返回 false</p><p>而 Number.isNaN 修正了这个逻辑，只做纯粹的判断，避免了歧义：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> numberStr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(numberStr) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(numberStr) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;font-style:italic;">// true **歧义点**</span></span>
<span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(str) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>因此，<code>Number.isNaN</code> 的 pollfill 可以这样实现：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isNaN</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="same-value-zero-算法" tabindex="-1">Same-Value-Zero 算法 <a class="header-anchor" href="#same-value-zero-算法" aria-label="Permalink to &quot;Same-Value-Zero 算法&quot;">​</a></h2><p>很多时候，可能并不想区别开 <code>+0</code> 与 <code>-0</code>，但还需要知道是不是 <code>NaN</code>，因此推出了这个算法。</p><p>这个算法和 Same-Value 算法很类似，以为差别是目前这个算法 <code>+0</code> 等于 <code>-0</code> 。</p><p>内置该算法的函数前面有提到，下面以 <code>Set</code> 举例：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0 / 0 = NaN 因此不会添加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size) </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// -0 == +0 因此不会添加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size) </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><p>参考资料：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noreferrer">Primitive | MDN</a></li><li><a href="https://262.ecma-international.org/5.1" target="_blank" rel="noreferrer">Standard ECMA-262 5.1 Edition</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noreferrer">Equality comparisons and sameness | MDN</a></li></ul>`,39);function C(a,D,A,F,d,u){return n(),o("div",null,[s("h1",r,[p(e(a.$frontmatter.title)+" ",1),y]),i])}const f=l(c,[["render",C]]);export{N as __pageData,f as default};
