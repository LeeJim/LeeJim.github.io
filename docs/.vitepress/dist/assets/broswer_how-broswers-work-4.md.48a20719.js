import{_ as n,o as l,c as o,k as s,a as p,t as e,S as t}from"./chunks/framework.7f03344f.js";const g=JSON.parse('{"title":"手把手教你实现一个浏览器引擎（四）Style","description":"","frontmatter":{"title":"手把手教你实现一个浏览器引擎（四）Style","date":"2020-02-12T20:49:01.000Z","toc":true,"tags":null,"categories":[["浏览器"],["译文"]]},"headers":[],"relativePath":"broswer/how-broswers-work-4.md","filePath":"broswer/how-broswers-work-4.md","lastUpdated":null}'),r={name:"broswer/how-broswers-work-4.md"},c={id:"frontmatter-title",tabindex:"-1"},D=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),F=t(`<h2 id="第四部分-style" tabindex="-1">第四部分 Style <a class="header-anchor" href="#第四部分-style" aria-label="Permalink to &quot;第四部分 Style&quot;">​</a></h2><p>欢迎回到关于构建你自己的玩具浏览器引擎的系列文章。如果你是刚开始收看文章，你可以从下面找到以前的文章：</p><ul><li><a href="./how-broswers-work-1.html">第一部分：起步</a></li><li><a href="./how-broswers-work-2.html">第二部分：HTML</a></li><li><a href="./how-broswers-work-3.html">第三部分：CSS</a></li></ul><p>本文将会介绍在CSS标准中所谓的 分配属性值(<a href="http://www.w3.org/TR/CSS2/cascade.html" target="_blank" rel="noreferrer">assigning vproperty values</a>) 或者 样式模块(<a href="https://github.com/mbrubeck/robinson/blob/275ea716d50565b10ce91c0054fbf527281180bb/src/style.rs" target="_blank" rel="noreferrer">style</a> module)。这个模块将拿DOM节点和CSS规则作为输入，将他们互相匹配，为所给的所有节点确定每个CSS属性的值。</p><p>这部分不会包含很多代码，因为我还没有实现相对复杂的部分。然而，我觉得剩下的仍然相当有趣，我还会解释如何实现一些缺失的部分。</p><h2 id="样式树-the-style-tree" tabindex="-1">样式树 The Style Tree <a class="header-anchor" href="#样式树-the-style-tree" aria-label="Permalink to &quot;样式树 The Style Tree&quot;">​</a></h2><p>我将Robinson的样式模块的输出称为 <strong>样式树(style tree)</strong>， 在树里的每个节点都指向一个DOM节点，加上它的CSS属性值：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Map from CSS property names to values.</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropertyMap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HashMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// A node with associated style data.</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StyledNode</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Node</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;"> // pointer to a DOM node</span></span>
<span class="line"><span style="color:#A6ACCD;">    specified_values</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropertyMap</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">StyledNode</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p><code>&#39;a</code>是什么意思呢？这是都是生命周期，是Rust保证指针是内存安全的且不需要进行垃圾收集的一部分。如果你不是使用Rust工作的话，你可以忽略他们。他们对代码的意义影响不是很大。</p></blockquote><p>其实，我们可以给<code>dom:Node</code>的结构增加字段，而不是创建一个新的树。但是我想抱着样式的代码和之前的“课程”相对独立。这也是给了我一个机会讲一下在大部分渲染引擎都会出现的 <strong>平行树(parallel trees)</strong></p><p>浏览器引擎模块经常会将一个树当做输入，然后输出一个不同但是相关的树 。比如，Gecko的 <a href="https://wiki.mozilla.org/Gecko:Key_Gecko_Structures_And_Invariants" target="_blank" rel="noreferrer">布局代码(layout code)</a> 利用 <strong>DOM树</strong> 生成 <strong>框架树(frame tree)</strong>，然后将用于构建 <strong>视图树(view tree)</strong>。Blink 和 WebKit 将 DOM树 转换成 <strong>渲染树(render tree)</strong>。在这些引擎的后面阶段还会生成很多树，包括 <strong>层级树(layer tree)</strong> 和 <strong>部件树(widget tree)</strong>。</p><p>在完成其他几个阶段之后，我们的玩具浏览器引擎的流水线(pipeline)将会看起来像是这样：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qpiaQcgGBL79wMzjlEyguV4WXTXbgtCwIOX8zNJ9KlOP8TScxxusxZbvAtic8qkmKC54PicgBRUe5iaRibIQIY764oQ/0?wx_fmt=jpeg" alt=""></p><p>在我的实现方式里，DOM树里的每个节点在样式树里都只有一个节点。但是在更复杂的流水线阶段，几个输入的节点可能会合并成一个输出节点。或者，一个输入节点可能会扩展为多个输出节点，或者被完全跳过。例如，样式树可能移除一个<code>display</code>属性设置成<code>none</code>的元素。（相反，我将在布局阶段移除这些，因为我的代码反而比较简单）</p><h2 id="匹配选择器-selector-matching" tabindex="-1">匹配选择器 Selector Matching <a class="header-anchor" href="#匹配选择器-selector-matching" aria-label="Permalink to &quot;匹配选择器 Selector Matching&quot;">​</a></h2><p>构建 <strong>样式树(style tree)</strong> 的第一步就是匹配选择器。因为我的CSS解析器只支持简单选择器，因此这将是很简单。可以通过查看元素本身来判断简单选择器是否与元素匹配。匹配复合选择器则需要遍历整个DOM树来查看元素的 <strong>兄弟元素(siblings)</strong>，<strong>父元素(parents)</strong> 等等。</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">matches</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">ElementData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">Selector</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">match</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">selector </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Simple</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">ref</span><span style="color:#A6ACCD;"> simple_selector</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">matches_simple_selector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> simple_selector</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>为了提供帮助，我们将给我们的 DOM元素类型 增加一些遍历的ID和class访问器。class属性可以包含多个用空格分隔的类名，最后将这些类名通过哈希表的形式返回。</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ElementData</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Option</span><span style="color:#89DDFF;">&lt;&amp;</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attributes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">classes</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HashSet</span><span style="color:#89DDFF;">&lt;&amp;</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">match</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attributes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">Some</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">classlist</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> classlist</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">collect</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">None</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HashSet</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>要测试一个简单选择器是否匹配了元素，只需要查看每个选择器的 <strong>组件(component)</strong> ，如果一个元素没有一个匹配上的class，ID或者标签名就返回<code>false</code></p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">matches_simple_selector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">ElementData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">SimpleSelector</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Check type selector</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag_name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">any</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> elem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag_name </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Check ID selector</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">any</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> elem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Some</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Check class selectors</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> elem_classes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> elem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">classes</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">any</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">elem_classes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contains</span><span style="color:#89DDFF;">(&amp;**</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // We didn&#39;t find any non-matching selector components.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>Rust笔记：这个函数使用<code>any</code>这个方法，如果迭代器包含一个可以通过提供的测试函数的元素则返回true。类似于 Python 或者 Haskell 里的 <code>any</code> 函数，JavaScript 里的 <code>some</code> 方法</p></blockquote><h2 id="构建样式树-build-the-style-tree" tabindex="-1">构建样式树 Build the Style Tree <a class="header-anchor" href="#构建样式树-build-the-style-tree" aria-label="Permalink to &quot;构建样式树 Build the Style Tree&quot;">​</a></h2><p>接下来，我们需要遍历整个DOM树，对于树中的每个元素，我们将在样式表中搜索匹配的规则。</p><p>比较两个匹配相同元素的规则时，我们需要使用每个匹配项中 <strong>最高明确性(highest specificity)</strong> 的选择器。因为我们CSS解析器储存的选择器是按明确性从高往低排序的，所以我们可以在找到匹配的选择器后立即停止，然后返回其明确性以及规则的指针。</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MatchedRule</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Specificity</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rule</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// If \`rule\` matches \`elem\`, return a \`MatchedRule\`. Otherwise return \`None\`.</span></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">match_rule</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">ElementData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rule</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rule</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Option</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MatchedRule</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Find the first (highest-specificity) matching selector.</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">selectors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">matches</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">specificity</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> rule</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>为了找到与某个元素匹配的所有规则，我们调用<code>filter_map</code>方法，它可以线性扫描整个样式表，检查每个规则并丢弃不匹配的规则。真正的浏览器引擎会通过基于标签名，ID，class等将规则存储在多个哈希表，从而实现快速匹配。</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Find all CSS rules that match the given element.</span></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">matching_rules</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">ElementData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stylesheet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stylesheet</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MatchedRule</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    stylesheet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">filter_map</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">rule</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">match_rule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rule</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">collect</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>一旦有了匹配的规则，我们就可以找到元素的 <strong>指定值(specified value)</strong>。将每个规则的属性值插入到<code>HashMap</code>。将规则按 <strong>明确性(specificity)</strong> 排序，这样较高明确性的规则会在较低的之后进行处理，可以在<code>HashMap</code>将它们的值覆盖。</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Apply styles to a single element, returning the specified values.</span></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">specified_values</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">ElementData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stylesheet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">Stylesheet</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropertyMap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> values </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HashMap</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> rules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">matching_rules</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stylesheet</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Go through the rules from lowest to highest specificity.</span></span>
<span class="line"><span style="color:#A6ACCD;">    rules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort_by</span><span style="color:#89DDFF;">(|&amp;(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">)|</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cmp</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rule</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> rules </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> declaration </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">rule</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">declarations </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            values</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">declaration</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> declaration</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> values</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在我们拥有了遍历DOM树并构建样式树所需的一切。需要注意的是，选择器匹配仅适用于元素，因此文本节点的指定值只是一个空的<code>map</code></p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Apply a stylesheet to an entire DOM tree, returning a StyledNode tree.</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">style_tree</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stylesheet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stylesheet</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StyledNode</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">StyledNode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        node</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        specified_values</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">match</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">node_type </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">Element</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">ref</span><span style="color:#A6ACCD;"> elem</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">specified_values</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stylesheet</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">Text</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HashMap</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">style_tree</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stylesheet</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">collect</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上是Robinson关于构建样式树的所有代码。接下来，我将谈论一些明显的遗漏。</p><h2 id="层叠-cascade" tabindex="-1">层叠 Cascade <a class="header-anchor" href="#层叠-cascade" aria-label="Permalink to &quot;层叠 Cascade&quot;">​</a></h2><p>由网页作者提供的样式表称为 <strong>作者样式表(author stlye sheets)</strong>，除此之外，浏览器还通过 <strong>用户代理样式表(user agent style sheets)</strong> 提供了<a href="http://www.w3.org/TR/CSS2/sample.html" target="_blank" rel="noreferrer">默认样式</a>。还有它可以允许用户通过 <strong>用户样式表(user style sheets)</strong> 添加自定义样式（比如 Gecko 的 <a href="http://www-archive.mozilla.org/unix/customizing.html#usercss" target="_blank" rel="noreferrer">userContent.css</a>）。</p><p>层叠(<a href="http://www.w3.org/TR/CSS2/cascade.html#cascade" target="_blank" rel="noreferrer">cascade</a>) 定义了这三个“数据源”哪个优先权更高。层叠有六个级别：每个数据源都有”普通(normal)“声明，加上每个数据源还有<code>!important</code>声明。</p><p>Robinson的样式代码没有实现层叠的功能。它仅读取一个样式表。缺少默认样式表意味着HTML元素不会有你预期的任何默认样式。例如：<code>&lt;head&gt;</code>元素的内容不会被隐藏，除非你明确在你的样式表中添加这个规则：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">head</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>实现层叠应该相当容易：只需跟踪每条规则的起源，并根据明确性排序，其中明确性要加入数据源和重要性这些权重。一个简化的两级层叠应该足以支持最常见的情况：普通用户代理样式 和 普通作者样式。</p><h2 id="计算值-computed-values" tabindex="-1">计算值 Computed Values <a class="header-anchor" href="#计算值-computed-values" aria-label="Permalink to &quot;计算值 Computed Values&quot;">​</a></h2><p>除了上述提到的“指定值(sepecified values)”之外，CSS还定义了 <strong>初始值(initial values)</strong>，<strong>计算值(computed values)</strong>，<strong>使用值(used values)</strong> 和 <strong>实际值(actual values)</strong>。<a href="http://www.w3.org/TR/CSS2/cascade.html#value-stages" target="_blank" rel="noreferrer">CSS标准链接</a></p><p>初始值是层叠中没有指定的属性默认值。计算值则是基于指定值的，但可能会应用一些特定属性的规范化规则。</p><p>根据CSS规范的定义，正确实现这些属性需要为每个属性使用的单独的代码。这是现实浏览器引擎的必要工作，但希望在我的玩具项目中避免这些。在后面阶段，在缺少指定值的时候，使用这些值的代码会（通过某种方式）使用默认值来模拟初始值。</p><p>使用值 和 实际值则是在布局期间和布局之后计算的，我将在以后的文章中介绍。</p><h2 id="继承-inheritance" tabindex="-1">继承 Inheritance <a class="header-anchor" href="#继承-inheritance" aria-label="Permalink to &quot;继承 Inheritance&quot;">​</a></h2><p>如果文本节点不匹配任何选择器，那么它如何得到颜色和字体和其他样式呢？答案就是 <strong>继承</strong>(<a href="http://www.w3.org/TR/CSS2/cascade.html#inheritance" target="_blank" rel="noreferrer">inheritance</a>)。</p><p>继承属性后，没有层叠值(cascaded value)的任何节点都将收到该属性的父元素的值。默认情况下，某些属性（如颜色）都是继承过来的；其他的属性只有在层叠值指定特殊值<code>inherit</code>时才会继承父元素。</p><p>我的代码没有支持继承。要实现这个，可以将父元素的样式数据传入<code>specified_values</code>函数，并使用硬编码的查找表来决定应继承哪些属性。</p><h2 id="样式属性-style-attributes" tabindex="-1">样式属性 Style Attributes <a class="header-anchor" href="#样式属性-style-attributes" aria-label="Permalink to &quot;样式属性 Style Attributes&quot;">​</a></h2><p>任何HTML元素都可以包括一个<code>style</code>属性，其中包含一系列的CSS声明。它们没有选择器，因为这些声明自动应用到这个元素本身。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">color: red; background: yellow;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>如果你想支持<code>style</code>属性，让<code>specified_values</code>函数检查属性即可。如果存在该属性，则将它从CSS解析器传入<code>parse_declarations</code>。由于这些属性比任何CSS选择器都更明确，因此在在 <strong>普通作者声明(normal author declarations)</strong> 之后应用这些 <strong>结果声明(resulting declarations)</strong>。</p><p>原文链接：<a href="https://limpet.net/mbrubeck/2014/08/23/toy-layout-engine-4-style.html" target="_blank" rel="noreferrer">https://limpet.net/mbrubeck/2014/08/23/toy-layout-engine-4-style.html</a></p>`,53);function y(a,C,A,i,d,h){return l(),o("div",null,[s("h1",c,[p(e(a.$frontmatter.title)+" ",1),D]),F])}const m=n(r,[["render",y]]);export{g as __pageData,m as default};
